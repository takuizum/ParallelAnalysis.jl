## NOT INCLUDED FILE
#


# SkewedNormal
# 
# See https://github.com/JuliaStats/Distributions.jl/blob/master/src/univariate/continuous/skewnormal.jl#L52 , 
# and 
# https://github.com/JuliaStats/Distributions.jl/pull/1104
# Distributions' utilities for skew normal, except for cdf, has already been porvided.
# Install up from version 0.23.10
# add Distributions@0.23.10

# Internal functions
# Too slow
Distributions.cdf(dist::SkewNormal, x::Real) = quadgk(t->pdf(dist,t), -Inf, x)[1]
function Statistics.quantile(dist::SkewNormal, Œ≤::Float64) 
    if Œ≤ == 0.0
        return -Inf
    elseif Œ≤ == 1.0
        return Inf
    else
        find_zero(x -> cdf(dist, x) - Œ≤, dist.Œæ)
    end
end

# Trivariate Normal integration
function trivariateintegral(d::MvNormal, c‚ÇÅ, c‚ÇÇ, c‚ÇÉ)
    Œ¶ = Distributions.normcdf
    A‚ÇÅ = Distributions.normpdf(c‚ÇÅ) / Œ¶(c‚ÇÅ)
    Œº‚ÇÇ‚ÇÅ = -d.Œ£[1, 2] * A‚ÇÅ
    B‚ÇÅ = A‚ÇÅ*(c‚ÇÅ + A‚ÇÅ)
    œÉ‚ÇÇ‚ÇÅ = sqrt(1 - d.Œ£[1, 2]^2 * B‚ÇÅ)
    c‚ÇÇ‚ÇÅ = (c‚ÇÇ - Œº‚ÇÇ‚ÇÅ) / œÉ‚ÇÇ‚ÇÅ
    Œº‚ÇÉ‚ÇÅ = -d.Œ£[1, 3] * A‚ÇÅ
    œÉ‚ÇÉ‚ÇÅ = sqrt(1 - d.Œ£[1, 3]^2 * B‚ÇÅ)
    c‚ÇÉ‚ÇÅ = (c‚ÇÉ - Œº‚ÇÉ‚ÇÅ) / œÉ‚ÇÉ‚ÇÅ
    A‚ÇÇ‚ÇÅ = Distributions.normpdf(c‚ÇÇ‚ÇÅ) / Œ¶(c‚ÇÇ‚ÇÅ)
    B‚ÇÇ‚ÇÅ = A‚ÇÇ‚ÇÅ*(c‚ÇÇ‚ÇÅ + A‚ÇÇ‚ÇÅ)
    r‚ÇÇ‚ÇÉ‚ÇÅ = (d.Œ£[2, 3] - d.Œ£[1, 2]*d.Œ£[1, 3]*B‚ÇÅ) / (‚àö(1-d.Œ£[1, 2]^2*B‚ÇÅ) * ‚àö(1-d.Œ£[1, 3]^2*B‚ÇÅ))
    c‚ÇÉ‚ÇÇ = (c‚ÇÉ‚ÇÅ + r‚ÇÇ‚ÇÉ‚ÇÅ*A‚ÇÇ‚ÇÅ) / ‚àö(1-r‚ÇÇ‚ÇÉ‚ÇÅ^2*B‚ÇÇ‚ÇÅ)
    return Œ¶(c‚ÇÉ‚ÇÇ) * Œ¶(c‚ÇÇ‚ÇÅ) * Œ¶(c‚ÇÅ)
end

# BivariateSkewedNormal
#
# function bivariateskewnormpdf(x‚ÇÅ, x‚ÇÇ, œâ, Œ±‚ÇÅ, Œ±‚ÇÇ)
#     2pdf(MvNormal([0, 0], [1.0 œâ; œâ 1.0]), [x‚ÇÅ, x‚ÇÇ]) * Distributions.normcdf(x‚ÇÅ * Œ±‚ÇÅ + x‚ÇÇ * Œ±‚ÇÇ)
# end

struct BivariateSkewNormal <: ContinuousMultivariateDistribution
    Œº
    Œ£
    Œ±
    function BivariateSkewNormal(Œº, Œ£, Œ±)
        if !(length(Œº) == length(Œ±) == size(Œ£, 1) == size(Œ£, 2))
            @error "The size of coordinates for each parameters do not match."
        else
            new(Œº, Œ£, Œ±)
        end
    end
end

function Distributions.pdf(d::BivariateSkewNormal, x::AbstractArray{T,1}) where T
    2*pdf(MvNormal(d.Œº, d.Œ£), x) * Distributions.normcdf(d.Œ±'x)
end

function Distributions.cdf(d::BivariateSkewNormal, c::AbstractArray{T,1}) where T
    Œ® = d.Œ£
    Œ± = d.Œ±
    Œ£ = [
        1+Œ±'Œ®*Œ±  -Œ±'Œ®
        -Œ®*Œ±      Œ®
    ]
    2trivariateintegral(MvNormal(Œ£), 0.0, c[1], c[2])
end

# Numerical integration for bivariate skew normal
function H(a, b, c, d, mvd::BivariateSkewNormal)
    A1 = a == -Inf || c == -Inf ?  0.0 : cdf(mvd, [a, c])
    A2 = a == -Inf ? 0.0 : cdf(mvd, [a, d])
    A3 = c == -Inf ? 0.0 : cdf(mvd, [b, c])
    A4 = d == Inf && b == Inf ? 1.0 : cdf(mvd, [b, d])
    # if (A1 - A2 - A3 + A4) < 0.0
    #     @warn "Volumes of a rectangles are $([A1, A2, A3, A4]) at $([a, b, c, d]) on\n$(mvd) is negative."
    # end
    return A1 - A2 - A3 + A4
end

function marginalparameters(d::BivariateSkewNormal, i)
    c = Dict(1 => 2, 2 => 1)
    Œ© = d.Œ£[c[i],c[i]] - d.Œ£[c[i],i] / d.Œ£[i,i] * d.Œ£[i,c[i]] # 1- œâ¬≤
    (d.Œ±[i] + d.Œ£[i,c[i]]/d.Œ£[i,i]*d.Œ±[c[i]]) / ‚àö(1+d.Œ±[c[i]]^2* Œ©)
end

function snpolyc(t::ConTab)
    # non iterative, psedo-MLE
    cumx = [0.0; cumsum(t.mx)[1:end-1]; 1.0]
    cumy = [0.0; cumsum(t.my)[1:end-1]; 1.0]
    # Œæx = quantile.(SkewNormal(0.0, 1.0, 0.0), cumx)
    # Œæy = quantile.(SkewNormal(0.0, 1.0, 0.0), cumy)
    # # Heuristic version
    # opt = optimize(Œ∏ -> loss(t, Œæx, Œæy, BivariateSkewNormal([0, 0], [1.0 Œ∏[1]; Œ∏[1] 1.0], [Œ∏[2], Œ∏[3]])), [-1.0, -Inf, -Inf], [1.0, Inf, Inf], [0.0, 0.0, 0.0], Fminbox(NelderMead()))
    # Complex model
    opt = optimize(Œ∏ -> loss2(t, cumx, cumy, BivariateSkewNormal([0, 0], [1.0 Œ∏[1]; Œ∏[1] 1.0], [Œ∏[2], Œ∏[3]])), [-1.0, -Inf, -Inf], [1.0, Inf, Inf], [0.0, 0.0, 0.0], Fminbox(NelderMead()))
    # calculate parameters on marginal distributions
    Œ∏‚Ä≤ = opt.minimizer
    Œ±‚ÇÅ = marginalparameters(BivariateSkewNormal([0, 0], [1.0 Œ∏‚Ä≤[1]; Œ∏‚Ä≤[1] 1.0], [Œ∏‚Ä≤[2], Œ∏‚Ä≤[3]]), 1)
    Œ±‚ÇÇ = marginalparameters(BivariateSkewNormal([0, 0], [1.0 Œ∏‚Ä≤[1]; Œ∏‚Ä≤[1] 1.0], [Œ∏‚Ä≤[2], Œ∏‚Ä≤[3]]), 2)
    Œæx = quantile.(SkewNormal(0.0, 1.0, Œ±‚ÇÅ), cumx)
    Œæy = quantile.(SkewNormal(0.0, 1.0, Œ±‚ÇÇ), cumy)
    œâ = Œ∏‚Ä≤[1]
    Œ¥‚ÇÅ = Œ±‚ÇÅ / sqrt(1 + Œ±‚ÇÅ^2)
    Œ¥‚ÇÇ = Œ±‚ÇÇ / sqrt(1 + Œ±‚ÇÇ^2)
    ùúì = (œâ - Œ¥‚ÇÅ*Œ¥‚ÇÇ) / sqrt((1 - Œ¥‚ÇÅ) * (1 - Œ¥‚ÇÇ))
    œÅ = (œâ - 1/(2œÄ) * Œ¥‚ÇÅ*Œ¥‚ÇÇ) / sqrt((1 - 2*Œ¥‚ÇÅ^2/œÄ) * (1 - 2*Œ¥‚ÇÇ^2/œÄ))
    return (œÅ = œÅ, r = 2sin(œÅ * œÄ / 6), œÑ‚ÇÅ = Œæx, œÑ‚ÇÇ = Œæy, Œ±‚ÇÅ = Œ±‚ÇÅ, Œ±‚ÇÇ = Œ±‚ÇÇ)
end

function snpolyc(x, y)
    tab = ConTab(x, y)
    snpolyc(tab)
end


function loss2(t::ConTab, cumx, cumy, d::MultivariateDistribution)
    Œæx = quantile.(SkewNormal(0.0, 1.0, marginalparameters(d, 1)), cumx)
    Œæy = quantile.(SkewNormal(0.0, 1.0, marginalparameters(d, 2)), cumy)
    I, J = size(t.X)
    h = zeros(Float64, I, J)
    @fastmath for i in 1:I, j in 1:J
        if i == I && j == J && sum(h) < 1.0
            h[i, j] = 1.0 - sum(h)
        elseif i == I
            h[i, j] = t.my[j] - sum(h[1:end-1, j])[1]
        elseif j == J
            h[i, j] = t.mx[i] - sum(h[i, 1:end-1])[1]
        else
            h[i, j] = H(Œæx[i], Œæx[i+1], Œæy[j], Œæy[j+1], d)
        end
        # h[i, j] = H(Œæx[i], Œæx[i+1], Œæy[j], Œæy[j+1], d, step)
    end
    if any(h .< 0.0)
        # @warn("Fail to optimize parameters. Return, on the way, the volume of the rectangles of SkewNormal")
        # @show h, d
        h = abs.(h)
    end
    h = h ./ sum(h)
    return - sum(t.X .* log.(h))
    # return - prod(t.X .^ h)
end

